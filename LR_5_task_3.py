{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOGpUSpc0eDgE2u/+saoU6T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"gey9Hhdf48Ul","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734900553748,"user_tz":-120,"elapsed":15427,"user":{"displayName":"Ярослав Білотіл","userId":"06797585363548962278"}},"outputId":"3bdacbe8-1ba4-4ad6-94ec-115767b9f8d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","##### Searching optimal parameters for precision_weighted\n","\n","##### Searching optimal parameters for recall_weighted\n","\n","Grid scores for the parameter grid:\n","{'max_depth': 2, 'n_estimators': 100} --> 0.843\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 4, 'n_estimators': 100} --> 0.837\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 7, 'n_estimators': 100} --> 0.841\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 12, 'n_estimators': 100} --> 0.83\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 16, 'n_estimators': 100} --> 0.815\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 4, 'n_estimators': 25} --> 0.843\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 4, 'n_estimators': 50} --> 0.836\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 4, 'n_estimators': 100} --> 0.837\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n","{'max_depth': 4, 'n_estimators': 250} --> 0.841\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import classification_report\n","from sklearn.model_selection import train_test_split, GridSearchCV  # змінили на правильні імпорти\n","from sklearn.ensemble import ExtraTreesClassifier\n","from utilities import visualize_classifier\n","\n","# Завантаження даних\n","input_file = 'data_random_forests.txt'\n","data = np.loadtxt(input_file, delimiter=',')\n","X, y = data[:, :-1], data[:, -1]\n","class_0 = np.array(X[y == 0])\n","class_1 = np.array(X[y == 1])\n","class_2 = np.array(X[y == 2])\n","\n","# Розділення на навчальну та тестову вибірки\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\n","\n","# Визначення сітки параметрів\n","parameter_grid = [\n","    {'n_estimators': [100], 'max_depth': [2, 4, 7, 12, 16]},\n","    {'max_depth': [4], 'n_estimators': [25, 50, 100, 250]}  # 'max_depth' тепер в списку\n","]\n","\n","metrics = ['precision_weighted', 'recall_weighted']\n","\n","# Пошук оптимальних параметрів для кожної метрики\n","for metric in metrics:\n","    print(\"\\n##### Searching optimal parameters for\", metric)\n","\n","    # Виконання пошуку за допомогою GridSearchCV\n","    classifier = GridSearchCV(\n","        ExtraTreesClassifier(random_state=0),\n","        parameter_grid, cv=5, scoring=metric\n","    )\n","    classifier.fit(X_train, y_train)\n","\n","print(\"\\nGrid scores for the parameter grid:\")\n","for params, avg_score in zip(classifier.cv_results_['params'], classifier.cv_results_['mean_test_score']):\n","    print(params, '-->', round(avg_score, 3))\n","\n","    print(\"\\nBest parameters:\", classifier.best_params_)\n","\n","    # Оцінка результатів на тестовому наборі\n","    y_pred = classifier.predict(X_test)\n","    print(\"\\nPerformance report:\\n\")\n","    print(classification_report(y_test, y_pred))\n"]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import classification_report\n","from sklearn.model_selection import GridSearchCV, train_test_split\n","from sklearn.ensemble import ExtraTreesClassifier\n","\n","# Завантаження вхідних даних\n","input_file = 'data_random_forests.txt'\n","data = np.loadtxt(input_file, delimiter=',')\n","X, y = data[:, :-1], data[:, -1]\n","\n","# Розбиття даних на навчальний та тестовий набори\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\n","\n","# Визначення сітки параметрів для пошуку\n","parameter_grid = [\n","    {'n_estimators': [100], 'max_depth': [2, 4, 7, 12, 16]},\n","    {'max_depth': [4], 'n_estimators': [25, 50, 100, 250]}\n","]\n","\n","# Визначення метрики для пошуку оптимальних параметрів (recall_weighted)\n","metrics = ['recall_weighted']\n","for metric in metrics:\n","    print(\"\\n##### Searching optimal parameters for\", metric)\n","\n","    # Створення GridSearchCV для пошуку оптимальних параметрів за заданою метрикою\n","    classifier = GridSearchCV(\n","        ExtraTreesClassifier(random_state=0),\n","        parameter_grid, cv=5, scoring=metric\n","    )\n","\n","    # Навчання класифікатора\n","    classifier.fit(X_train, y_train)\n","\n","    # Виведення результатів пошуку\n","    print(\"\\nGrid scores for the parameter grid:\")\n","    for params, avg_score in zip(classifier.cv_results_['params'], classifier.cv_results_['mean_test_score']):\n","        print(params, '-->', round(avg_score, 3))\n","\n","    # Виведення найкращих параметрів\n","    print(\"\\nBest parameters:\", classifier.best_params_)\n","\n","    # Оцінка ефективності на тестовому наборі\n","    y_pred = classifier.predict(X_test)\n","    print(\"\\nPerformance report:\\n\")\n","    print(classification_report(y_test, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z0utdzhEJD-H","executionInfo":{"status":"ok","timestamp":1734900820649,"user_tz":-120,"elapsed":6755,"user":{"displayName":"Ярослав Білотіл","userId":"06797585363548962278"}},"outputId":"e24c5e55-8fa3-4430-9291-7cd5696e06d0"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","##### Searching optimal parameters for recall_weighted\n","\n","Grid scores for the parameter grid:\n","{'max_depth': 2, 'n_estimators': 100} --> 0.843\n","{'max_depth': 4, 'n_estimators': 100} --> 0.837\n","{'max_depth': 7, 'n_estimators': 100} --> 0.841\n","{'max_depth': 12, 'n_estimators': 100} --> 0.83\n","{'max_depth': 16, 'n_estimators': 100} --> 0.815\n","{'max_depth': 4, 'n_estimators': 25} --> 0.843\n","{'max_depth': 4, 'n_estimators': 50} --> 0.836\n","{'max_depth': 4, 'n_estimators': 100} --> 0.837\n","{'max_depth': 4, 'n_estimators': 250} --> 0.841\n","\n","Best parameters: {'max_depth': 2, 'n_estimators': 100}\n","\n","Performance report:\n","\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.81      0.87        79\n","         1.0       0.81      0.86      0.83        70\n","         2.0       0.83      0.91      0.87        76\n","\n","    accuracy                           0.86       225\n","   macro avg       0.86      0.86      0.86       225\n","weighted avg       0.86      0.86      0.86       225\n","\n"]}]}]}